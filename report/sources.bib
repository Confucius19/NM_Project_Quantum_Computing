
@article{Beauregard2003,
  author   = {Beauregard, Stephane},
  journal  = {arXiv:quant-ph/0205095},
  title    = {Circuit for {Shor}'s algorithm using 2n+3 qubits},
  year     = {2003},
  month    = feb,
  note     = {arXiv: quant-ph/0205095},
  abstract = {We try to minimize the number of qubits needed to factor an integer of n bits using Shor's algorithm on a quantum computer. We introduce a circuit which uses 2n+3 qubits and O(n{\textasciicircum}3 lg(n)) elementary quantum gates in a depth of O(n{\textasciicircum}3) to implement the factorization algorithm. The circuit is computable in polynomial time on a classical computer and is completely general as it does not rely on any property of the number to be factored. Keywords: Factorization, quantum circuits, modular arithmetics},
  annote   = {Comment: 14 pages, 10 figures, revised January 24, 2003},
  file     = {arXiv Fulltext PDF:https\://arxiv.org/pdf/quant-ph/0205095.pdf:application/pdf},
  keywords = {Quantum Physics},
  url      = {http://arxiv.org/abs/quant-ph/0205095},
  urldate  = {2021-12-06}
}

@article{Vedral1996,
  author   = {Vedral, V. and Barenco, A. and Ekert, A.},
  journal  = {Physical Review A},
  title    = {Quantum {Networks} for {Elementary} {Arithmetic} {Operations}},
  year     = {1996},
  issn     = {1050-2947, 1094-1622},
  month    = jul,
  note     = {arXiv: quant-ph/9511018},
  number   = {1},
  pages    = {147--153},
  volume   = {54},
  abstract = {Quantum computers require quantum arithmetic. We provide an explicit construction of quantum networks effecting basic arithmetic operations: from addition to modular exponentiation. Quantum modular exponentiation seems to be the most difficult (time and space consuming) part of Shor's quantum factorising algorithm. We show that the auxiliary memory required to perform this operation in a reversible way grows linearly with the size of the number to be factorised.},
  annote   = {Comment: 7 pages, LaTeX, + 6 PS figures in a tar compressed file. See also http://eve.physics.ox.ac.uk/QChome.html},
  doi      = {10.1103/PhysRevA.54.147},
  file     = {arXiv Fulltext PDF:https\://arxiv.org/pdf/quant-ph/9511018.pdf:application/pdf},
  keywords = {Quantum Physics},
  url      = {http://arxiv.org/abs/quant-ph/9511018},
  urldate  = {2021-12-06}
}

@article{Shor1997,
  author   = {Shor, Peter W.},
  journal  = {SIAM Journal on Computing},
  title    = {Polynomial-{Time} {Algorithms} for {Prime} {Factorization} and {Discrete} {Logarithms} on a {Quantum} {Computer}},
  year     = {1997},
  issn     = {0097-5397, 1095-7111},
  month    = oct,
  note     = {arXiv: quant-ph/9508027},
  number   = {5},
  pages    = {1484--1509},
  volume   = {26},
  abstract = {A digital computer is generally believed to be an efficient universal computing device; that is, it is believed able to simulate any physical computing device with an increase in computation time of at most a polynomial factor. This may not be true when quantum mechanics is taken into consideration. This paper considers factoring integers and finding discrete logarithms, two problems which are generally thought to be hard on a classical computer and have been used as the basis of several proposed cryptosystems. Efficient randomized algorithms are given for these two problems on a hypothetical quantum computer. These algorithms take a number of steps polynomial in the input size, e.g., the number of digits of the integer to be factored.},
  annote   = {Comment: 28 pages, LaTeX. This is an expanded version of a paper that appeared in the Proceedings of the 35th Annual Symposium on Foundations of Computer Science, Santa Fe, NM, Nov. 20--22, 1994. Minor revisions made January, 1996},
  doi      = {10.1137/S0097539795293172},
  file     = {arXiv Fulltext PDF:https\://arxiv.org/pdf/quant-ph/9508027.pdf:application/pdf},
  keywords = {Quantum Physics},
  url      = {http://arxiv.org/abs/quant-ph/9508027},
  urldate  = {2021-12-06}
}

@article{Rivest1978,
  author   = {Rivest, R. L. and Shamir, A. and Adleman, L.},
  journal  = {Communications of the ACM},
  title    = {A method for obtaining digital signatures and public-key cryptosystems},
  year     = {1978},
  abstract = {An encryption method is presented with the novel property that publicly re-vealing an encryption key does not thereby reveal the corresponding decryption key. This has two important consequences: 1. Couriers or other secure means are not needed to transmit keys, since a message can be enciphered using an encryption key publicly revealed by the intended recipient. Only he can decipher the message, since only he knows the corresponding decryption key. 2. A message can be “signed ” using a privately held decryption key. Anyone can verify this signature using the corresponding publicly revealed en-cryption key. Signatures cannot be forged, and a signer cannot later deny the validity of his signature. This has obvious applications in “electronic mail ” and “electronic funds transfer ” systems. A message is encrypted by representing it as a number M, raising M to a publicly specified power e, and then taking the remainder when the result is divided by the publicly specified product, n, of two large secret prime numbers p and q. Decryption is similar; only a different, secret, power d is used, where e · d = 1 (mod (p - 1)  · (q - 1)). The security of the system rests in part on the difficulty of factoring the published divisor, n. Key Words and Phrases: digital signatures, public-key cryptosystems, pri-vacy, authentication, security, factorization, prime number, electronic mail,},
  file     = {Citeseer - Full Text PDF:http\://citeseerx.ist.psu.edu/viewdoc/download\;jsessionid=4ACE95B7633A29B8938D89673A9AB720?doi=10.1.1.607.2677&rep=rep1&type=pdf:application/pdf}
}

@article{Zimmermann2020,
  author  = {Paul Zimmermann},
  journal = {N/A},
  title   = {Factorization of RSA-250},
  year    = {2020},
  url     = {https://listserv.nodak.edu/cgi-bin/wa.exe?A2=NMBRTHRY;dc42ccd1.2002}
}

@misc{Helwer2018,
  author       = {Andrew Helwer},
  howpublished = {Youtube},
  month        = apr,
  title        = {Quantum Computin for Computer Scientists},
  year         = {2018},
  url          = {https://youtu.be/F_Riqjdh2oM}
}
